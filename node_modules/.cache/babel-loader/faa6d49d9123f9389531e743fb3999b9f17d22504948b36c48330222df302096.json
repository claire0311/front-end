{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Paul2\\\\onedrive\\\\\\u684C\\u9762\\\\llm_dialougue_v4\\\\wingchat-app\\\\src\\\\components\\\\TrainingRoom\\\\ChatMessage.js\";\nimport React from 'react';\nimport { marked } from 'marked'; // 引入 marked 庫來解析 Markdown\nimport DOMPurify from 'dompurify'; // 引入 DOMPurify 來清理 HTML\n\n// 設定 marked 選項 (可選，例如啟用 GFM)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmarked.setOptions({\n  gfm: true,\n  // 啟用 GitHub Flavored Markdown\n  breaks: true // 將換行符轉換為 <br>\n});\nfunction ChatMessage({\n  sender,\n  text\n}) {\n  const isUser = sender === 'user';\n  const isSystem = sender === 'system'; // 處理系統訊息\n  const messageClass = isUser ? 'message user-message' : isSystem ? 'message system-message' : 'message ai-message';\n  const rowClass = isUser ? 'user-row' : isSystem ? 'system-row' : 'ai-row';\n\n  // 解析 Markdown 並清理 HTML\n  // 使用 try-catch 以防解析出錯\n  let cleanHtml = text; // 預設為原始文字\n  if (sender === 'ai' || sender === 'system') {\n    // 只對 AI 或系統訊息解析 Markdown\n    try {\n      // 先用 marked 將 Markdown 轉成 HTML，再用 DOMPurify 清理\n      const rawHtml = marked.parse(text);\n      cleanHtml = DOMPurify.sanitize(rawHtml);\n    } catch (error) {\n      console.error(\"Error parsing markdown or sanitizing HTML:\", error);\n      // 如果出錯，使用原始文本，並進行基本的 HTML 轉義以防 XSS\n      cleanHtml = text.replace(/</g, \"<\").replace(/>/g, \">\");\n    }\n  } else {\n    // 對於使用者輸入，只做基本的換行處理和 HTML 轉義\n    cleanHtml = text.replace(/</g, \"<\").replace(/>/g, \">\").replace(/\\n/g, '<br />');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message-row ${rowClass}`,\n    children: [!isUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spacer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: messageClass,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: cleanHtml\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 8\n    }, this), isUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spacer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_c = ChatMessage;\nexport default ChatMessage;\nvar _c;\n$RefreshReg$(_c, \"ChatMessage\");","map":{"version":3,"names":["React","marked","DOMPurify","jsxDEV","_jsxDEV","setOptions","gfm","breaks","ChatMessage","sender","text","isUser","isSystem","messageClass","rowClass","cleanHtml","rawHtml","parse","sanitize","error","console","replace","className","children","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/Users/Paul2/onedrive/桌面/llm_dialougue_v4/wingchat-app/src/components/TrainingRoom/ChatMessage.js"],"sourcesContent":["import React from 'react';\r\nimport { marked } from 'marked'; // 引入 marked 庫來解析 Markdown\r\nimport DOMPurify from 'dompurify'; // 引入 DOMPurify 來清理 HTML\r\n\r\n// 設定 marked 選項 (可選，例如啟用 GFM)\r\nmarked.setOptions({\r\n  gfm: true, // 啟用 GitHub Flavored Markdown\r\n  breaks: true, // 將換行符轉換為 <br>\r\n});\r\n\r\nfunction ChatMessage({ sender, text }) {\r\n  const isUser = sender === 'user';\r\n  const isSystem = sender === 'system'; // 處理系統訊息\r\n  const messageClass = isUser ? 'message user-message' : (isSystem ? 'message system-message' : 'message ai-message');\r\n  const rowClass = isUser ? 'user-row' : (isSystem ? 'system-row' : 'ai-row');\r\n\r\n  // 解析 Markdown 並清理 HTML\r\n  // 使用 try-catch 以防解析出錯\r\n  let cleanHtml = text; // 預設為原始文字\r\n  if (sender === 'ai' || sender === 'system') { // 只對 AI 或系統訊息解析 Markdown\r\n      try {\r\n          // 先用 marked 將 Markdown 轉成 HTML，再用 DOMPurify 清理\r\n          const rawHtml = marked.parse(text);\r\n          cleanHtml = DOMPurify.sanitize(rawHtml);\r\n      } catch (error) {\r\n          console.error(\"Error parsing markdown or sanitizing HTML:\", error);\r\n          // 如果出錯，使用原始文本，並進行基本的 HTML 轉義以防 XSS\r\n          cleanHtml = text.replace(/</g, \"<\").replace(/>/g, \">\");\r\n      }\r\n  } else {\r\n      // 對於使用者輸入，只做基本的換行處理和 HTML 轉義\r\n      cleanHtml = text.replace(/</g, \"<\").replace(/>/g, \">\").replace(/\\n/g, '<br />');\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={`message-row ${rowClass}`}>\r\n       {/* AI/System 訊息顯示在右側或中間 */}\r\n       {!isUser && <div className=\"spacer\"></div>}\r\n\r\n       <div className={messageClass}>\r\n         {/* 使用清理過的 HTML */}\r\n         <div dangerouslySetInnerHTML={{ __html: cleanHtml }} />\r\n       </div>\r\n\r\n       {/* 使用者訊息顯示在左側 */}\r\n        {isUser && <div className=\"spacer\"></div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatMessage;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,QAAQ,CAAC,CAAC;AACjC,OAAOC,SAAS,MAAM,WAAW,CAAC,CAAC;;AAEnC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAH,MAAM,CAACI,UAAU,CAAC;EAChBC,GAAG,EAAE,IAAI;EAAE;EACXC,MAAM,EAAE,IAAI,CAAE;AAChB,CAAC,CAAC;AAEF,SAASC,WAAWA,CAAC;EAAEC,MAAM;EAAEC;AAAK,CAAC,EAAE;EACrC,MAAMC,MAAM,GAAGF,MAAM,KAAK,MAAM;EAChC,MAAMG,QAAQ,GAAGH,MAAM,KAAK,QAAQ,CAAC,CAAC;EACtC,MAAMI,YAAY,GAAGF,MAAM,GAAG,sBAAsB,GAAIC,QAAQ,GAAG,wBAAwB,GAAG,oBAAqB;EACnH,MAAME,QAAQ,GAAGH,MAAM,GAAG,UAAU,GAAIC,QAAQ,GAAG,YAAY,GAAG,QAAS;;EAE3E;EACA;EACA,IAAIG,SAAS,GAAGL,IAAI,CAAC,CAAC;EACtB,IAAID,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,QAAQ,EAAE;IAAE;IAC1C,IAAI;MACA;MACA,MAAMO,OAAO,GAAGf,MAAM,CAACgB,KAAK,CAACP,IAAI,CAAC;MAClCK,SAAS,GAAGb,SAAS,CAACgB,QAAQ,CAACF,OAAO,CAAC;IAC3C,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MAClE;MACAJ,SAAS,GAAGL,IAAI,CAACW,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IAC1D;EACJ,CAAC,MAAM;IACH;IACAN,SAAS,GAAGL,IAAI,CAACW,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC;EACnF;EAGA,oBACEjB,OAAA;IAAKkB,SAAS,EAAE,eAAeR,QAAQ,EAAG;IAAAS,QAAA,GAEtC,CAACZ,MAAM,iBAAIP,OAAA;MAAKkB,SAAS,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAE1CvB,OAAA;MAAKkB,SAAS,EAAET,YAAa;MAAAU,QAAA,eAE3BnB,OAAA;QAAKwB,uBAAuB,EAAE;UAAEC,MAAM,EAAEd;QAAU;MAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC,EAGJhB,MAAM,iBAAIP,OAAA;MAAKkB,SAAS,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV;AAACG,EAAA,GAvCQtB,WAAW;AAyCpB,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}